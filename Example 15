// src/main/java/com/icecreamshop/model/IceCream.java

package com.icecreamshop.model;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.LocalDate;

@Entity
public class IceCream {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull(message = "Flavour is required")
    private String flavour;

    @NotNull(message = "Price is required")
    private double price;

    @NotNull(message = "Purchase date is required")
    @JsonFormat(pattern = "yyyy-MM-dd")  // Validates date in yyyy-MM-dd format
    @Column(name = "purchase_date")
    private LocalDate purchaseDate;  // Use LocalDate for date fields

    // Constructors, Getters, and Setters
    public IceCream() {}

    public IceCream(String flavour, double price, LocalDate purchaseDate) {
        this.flavour = flavour;
        this.price = price;
        this.purchaseDate = purchaseDate;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFlavour() {
        return flavour;
    }

    public void setFlavour(String flavour) {
        this.flavour = flavour;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public LocalDate getPurchaseDate() {
        return purchaseDate;
    }

    public void setPurchaseDate(LocalDate purchaseDate) {
        this.purchaseDate = purchaseDate;
    }
}








// src/main/java/com/icecreamshop/repository/IceCreamRepository.java

package com.icecreamshop.repository;

import com.icecreamshop.model.IceCream;
import org.springframework.data.jpa.repository.JpaRepository;

public interface IceCreamRepository extends JpaRepository<IceCream, Long> {
}








// src/main/java/com/icecreamshop/service/IceCreamService.java

package com.icecreamshop.service;

import com.icecreamshop.model.IceCream;
import com.icecreamshop.repository.IceCreamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class IceCreamService {

    @Autowired
    private IceCreamRepository iceCreamRepository;

    public List<IceCream> getAllFlavours() {
        return iceCreamRepository.findAll();
    }

    public Optional<IceCream> getFlavourById(Long id) {
        return iceCreamRepository.findById(id);
    }

    public IceCream addIceCream(IceCream iceCream) {
        return iceCreamRepository.save(iceCream);
    }

    public IceCream updateIceCream(Long id, IceCream updatedIceCream) {
        return iceCreamRepository.findById(id).map(iceCream -> {
            iceCream.setFlavour(updatedIceCream.getFlavour());
            iceCream.setPrice(updatedIceCream.getPrice());
            iceCream.setPurchaseDate(updatedIceCream.getPurchaseDate());
            return iceCreamRepository.save(iceCream);
        }).orElseGet(() -> {
            updatedIceCream.setId(id);
            return iceCreamRepository.save(updatedIceCream);
        });
    }

    public void deleteIceCream(Long id) {
        iceCreamRepository.deleteById(id);
    }
}






// src/main/java/com/icecreamshop/controller/IceCreamController.java

package com.icecreamshop.controller;

import com.icecreamshop.model.IceCream;
import com.icecreamshop.service.IceCreamService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/icecream")
public class IceCreamController {

    @Autowired
    private IceCreamService iceCreamService;

    @GetMapping
    public List<IceCream> getAllFlavours() {
        return iceCreamService.getAllFlavours();
    }

    @GetMapping("/{id}")
    public ResponseEntity<IceCream> getFlavourById(@PathVariable Long id) {
        Optional<IceCream> iceCream = iceCreamService.getFlavourById(id);
        if (iceCream.isPresent()) {
            return ResponseEntity.ok(iceCream.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public ResponseEntity<IceCream> addIceCream(@Valid @RequestBody IceCream iceCream) {
        return ResponseEntity.ok(iceCreamService.addIceCream(iceCream));
    }

    @PutMapping("/{id}")
    public ResponseEntity<IceCream> updateIceCream(@PathVariable Long id, @Valid @RequestBody IceCream updatedIceCream) {
        return ResponseEntity.ok(iceCreamService.updateIceCream(id, updatedIceCream));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteIceCream(@PathVariable Long id) {
        iceCreamService.deleteIceCream(id);
        return ResponseEntity.noContent().build();
    }
}









