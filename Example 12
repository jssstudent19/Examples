package com.lge.dms.mas.security.models;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Email;
import javax.validation.constraints.Size;
import javax.validation.constraints.Pattern;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @author gowtham.doodhi
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
public class LoginRequest {

    @NotBlank(message = "UserName/Email Cannot Be Empty")
    @Size(min = 3, max = 50, message = "UserName/Email must be between 3 and 50 characters")
    @Email(message = "Email format is invalid", regexp = ".+@.+\\..+", groups = EmailGroup.class) // Conditional validation
    private String userNameOrEmail;

    @NotBlank(message = "Password Cannot Be Empty")
    @Size(min = 8, max = 20, message = "Password must be between 8 and 20 characters")
    @Pattern(regexp = "^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[@#$%^&+=]).*$", message = "Password must contain at least one digit, one letter, and one special character")
    private String password;
}




@PostMapping("/signin")
public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
    try {
        // Validate the username/email and password are not blank
        if (loginRequest.getUserNameOrEmail() == null || loginRequest.getUserNameOrEmail().trim().isEmpty()) {
            return ResponseEntity.badRequest().body("Error: Username/Email cannot be blank.");
        }

        if (loginRequest.getPassword() == null || loginRequest.getPassword().trim().isEmpty()) {
            return ResponseEntity.badRequest().body("Error: Password cannot be blank.");
        }

        // Additional password length validation (if not already in LoginRequest validation)
        if (loginRequest.getPassword().length() < 8 || loginRequest.getPassword().length() > 20) {
            return ResponseEntity.badRequest().body("Error: Password must be between 8 and 20 characters.");
        }

        // Proceed with authentication using the provided credentials
        Authentication authentication = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(
                loginRequest.getUserNameOrEmail().toLowerCase(),
                loginRequest.getPassword()
            )
        );

        // Set authentication in the SecurityContextHolder
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Generate JWT token
        String jwt = jwtUtils.generateJwtToken(authentication);

        // Retrieve authenticated user's details
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();

        // Check for hardcoded "super_admin" credentials
        if (loginRequest.getUserNameOrEmail().equalsIgnoreCase("super_admin") &&
            loginRequest.getPassword().equals("Dm$ADMIN2023")) {
            throw new BadCredentialsException("Error: Bad Credentials for super_admin.");
        }

        // Return the JWT token and user details
        return ResponseEntity.ok(new JwtResponse(jwt, BigInteger.ONE, "super_admin", "superadmin@lge.com"));

    } catch (BadCredentialsException ex) {
        return ResponseEntity.badRequest().body("Error: Incorrect Credentials!");
    } catch (Exception e) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: An unexpected error occurred.");
    }
}






@PostMapping(value = "/signup", consumes = MediaType.APPLICATION_JSON_VALUE)
public ResponseEntity<?> registerUser(@Valid @RequestBody SignupRequest signUpRequest) throws ServiceException {

    // 1. Validate if the username is empty or null
    if (signUpRequest.getUserName() == null || signUpRequest.getUserName().trim().isEmpty()) {
        return ResponseEntity.badRequest().body("Error: Username cannot be empty.");
    }

    // 2. Check if username contains valid characters and is within the allowed length
    if (!signUpRequest.getUserName().matches("^[a-zA-Z0-9._-]{3,20}$")) {
        return ResponseEntity.badRequest().body("Error: Username must be between 3 and 20 characters and contain only letters, numbers, dots, underscores, or hyphens.");
    }

    // 3. Validate if the username is already taken
    if (userRepository.existsByUsername(signUpRequest.getUserName()).isPresent()) {
        return ResponseEntity.badRequest().body("Error: Username is already taken.");
    }

    // 4. Validate if the email is empty or null
    if (signUpRequest.getEmail() == null || signUpRequest.getEmail().trim().isEmpty()) {
        return ResponseEntity.badRequest().body("Error: Email cannot be empty.");
    }

    // 5. Check if the email format is valid
    if (!signUpRequest.getEmail().matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,7}$")) {
        return ResponseEntity.badRequest().body("Error: Email format is invalid.");
    }

    // 6. Validate if the email is already in use
    if (userRepository.existsByEmail(signUpRequest.getEmail()).equals(Boolean.TRUE)) {
        return ResponseEntity.badRequest().body("Error: Email is already in use.");
    }

    // 7. Validate if the password is empty or null
    if (signUpRequest.getPassword() == null || signUpRequest.getPassword().trim().isEmpty()) {
        return ResponseEntity.badRequest().body("Error: Password cannot be empty.");
    }

    // 8. Check if password is strong enough (minimum 8 characters, at least 1 digit, 1 letter, and 1 special character)
    if (!signUpRequest.getPassword().matches("^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[@#$%^&+=]).{8,20}$")) {
        return ResponseEntity.badRequest().body("Error: Password must be between 8 and 20 characters, contain at least one digit, one letter, and one special character.");
    }

    // 9. Check if the password confirmation matches the password (if your signup request has a confirmation field)
    if (signUpRequest.getPasswordConfirmation() != null &&
        !signUpRequest.getPassword().equals(signUpRequest.getPasswordConfirmation())) {
        return ResponseEntity.badRequest().body("Error: Password and password confirmation do not match.");
    }

    // Convert signup request to User and UserRole objects and save them
    User user = SecurityUtils.convertToUser(signUpRequest, encoder, sequenceGenerator);
    UserRole userRole = SecurityUtils.convertToUserRole(user, signUpRequest);

    // Save the user and role in the repository
    userRepository.save(user);
    userRolerepository.save(userRole);

    // Return successful response
    return ResponseEntity.ok("User registered successfully!");
}






import javax.persistence.Entity;
import javax.persistence.Id;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.math.BigInteger;
import java.time.LocalDateTime;

@Entity
public class User {

    @Id
    @NotNull(message = "User ID cannot be null.")
    private BigInteger userId;

    @NotBlank(message = "First name cannot be blank.")
    @Size(min = 2, max = 50, message = "First name must be between 2 and 50 characters.")
    private String firstName;

    @Size(max = 50, message = "Second name must be less than 50 characters.")
    private String secondName;

    @NotBlank(message = "Username cannot be blank.")
    @Size(min = 3, max = 20, message = "Username must be between 3 and 20 characters.")
    private String username;

    @NotBlank(message = "Password cannot be blank.")
    @Size(min = 8, message = "Password must be at least 8 characters long.")
    private String password;

    @Pattern(regexp = "^\\+?[0-9. ()-]{7,25}$", message = "Contact number is invalid.")
    private String contactNumber;

    @NotBlank(message = "Email cannot be blank.")
    @Email(message = "Email format is invalid.")
    private String email;

    @NotBlank(message = "Created by cannot be blank.")
    private String createdBy;

    @NotNull(message = "Creation date cannot be null.")
    private LocalDateTime createdOn;

    private String lastChngdByUser;

    private LocalDateTime lastChngdon;

    // Getters and setters
}




import javax.validation.constraints.*;
import java.util.Optional;
import java.time.LocalDate;

@RestController
@RequestMapping("dms/epg")
@CrossOrigin(origins = "*", maxAge = 3600, methods = { RequestMethod.OPTIONS, RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE }, allowedHeaders = "*")
public class EPGSportsController {

    @Autowired
    EPGService epgService;

    @Autowired
    TableNotfications notification;

    String regex = "^[a-zA-Z0-9]*$"; // Alphanumeric validation for systemName

    // Bean Validations applied here
    @GetMapping("/monitoringData")
    public List<DataTemplate> getMonitoringData(
            @RequestParam Optional<@Pattern(regexp = "^\\d{4}-\\d{2}-\\d{2}$", message = "Invalid date format, expected YYYY-MM-DD") String> date,
            @RequestParam Optional<@Pattern(regexp = "^(SUCCESS|FAILURE|ALL)$", message = "resultType must be either SUCCESS, FAILURE, or ALL") String> resultType,
            @RequestParam @NotBlank @Pattern(regexp = "^[a-zA-Z0-9]*$", message = "Invalid System Name") String systemName,
            @RequestParam @NotBlank String stage) throws Exception {

        // Validation for optional resultType
        if (!resultType.isPresent()) {
            resultType = Optional.of("%");
        }

        // systemName is already validated by @Pattern
        
        // If date is not present
        if (!date.isPresent()) {
            return epgService.getMonitoringData(resultType.get(), systemName, stage);
        }

        // Parse date if present
        List<DataTemplate> res = epgService.getMonitoringData(
                LocalDate.parse(date.get()), resultType.get(), systemName, stage);

        return res;
    }

    @PostMapping("sendData")
    public Map<String, Boolean> sendData(@RequestBody @Valid DataTemplate data) {
        boolean result = false;
        result = epgService.saveData(data);
        log.info("Received monitoring data: {}", data);

        try {
            notification.sendMessage(data);
        } catch (Exception e) {
            log.error("Error occurred: {}", e);
        }

        return Collections.singletonMap("success", result);
    }
}








import javax.validation.constraints.*;
import java.util.Optional;

@RestController
@RequestMapping("dms/epg")
@CrossOrigin(origins = "*", maxAge = 3600, methods = { RequestMethod.OPTIONS, RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE }, allowedHeaders = "*")
public class EPGSportsController {

    @Autowired
    EPGService epgService;

    String regex = "^[a-zA-Z0-9]*$"; // Regular expression for systemName

    @GetMapping("countByType")
    public Object getCountByType(
            @RequestParam @NotBlank @Pattern(regexp = "^[a-zA-Z0-9]*$", message = "Invalid System Name") String systemName,
            @RequestParam @NotBlank String messageType,
            @RequestParam @Min(value = 1, message = "Interval value should be greater than zero") int interval,
            @RequestParam @NotBlank @Pattern(regexp = "^(OP|QA2)$", message = "Invalid stage. Allowed values: OP, QA2") String stage,
            @RequestParam @Pattern(regexp = "^(AIC|EIC|KIC|RUC)$", message = "Invalid region. Allowed values: AIC, EIC, KIC, RUC") String region,
            @RequestParam("cntryCode") Optional<@Size(max = 2, message = "Country code must be at most 2 characters") String> cntryCode) throws Exception {

        // Validate systemName against regex (already handled by @Pattern)
        if (!systemName.matches(regex)) {
            throw new Exception("Please Enter valid SystemName");
        }

        // Country code validation when systemName is "epg"
        if (systemName.equals("epg")) {
            if (!cntryCode.isPresent() || cntryCode.get().isEmpty()) {
                throw new Exception("Country code is mandatory for EPG system type");
            }
            region += "-" + cntryCode.get();
        }

        // Call the service layer to get the count by message type
        return epgService.getCountByMessageType(systemName, messageType, interval, stage, region);
    }
}
